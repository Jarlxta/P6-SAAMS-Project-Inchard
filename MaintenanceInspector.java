
// Generated by Together

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import java.util.*;
import java.awt.event.*;
import java.awt.BorderLayout;

/**
 * An interface to SAAMS:
 * Maintenance Inspector Screen:
 * Inputs events from the Maintenance Inspector, and displays aircraft
 * information.
 * This class is a controller for the AircraftManagementDatabase: sending it
 * messages to change the aircraft status information.
 * This class also registers as an observer of the AircraftManagementDatabase,
 * and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 * 
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:node:::id4tg7xcko4qme4cko4swuu.node146
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 * @url element://model:project::SAAMS/design:view:::id4tg7xcko4qme4cko4swuu
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::id3y5z3cko4qme4cko4sw81
 */
public class MaintenanceInspector extends JFrame implements Observer {
  /**
   * The Maintenance Inspector Screen interface has access to the
   * AircraftManagementDatabase.
   * 
   * @clientCardinality 1
   * @supplierCardinality 1
   * @label accesses/observes
   * @directed
   */
  private AircraftManagementDatabase db;

  // private JButton button;
  private JLabel neededLabel;
  private JLabel commentLabel;

  private JList neededArea;
  private Vector<String> items = new Vector<String>();

  private JTextArea commentArea;

  private JButton reportFaults;
  private JButton complete;
  private JButton repair;

  private JLabel status;
  private JLabel location;

  public MaintenanceInspector(AircraftManagementDatabase db) {
    super("MaintenanceInspector");
    this.setSize(500, 500);
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    addGUI();
    this.setVisible(true);

    this.db = db;
  }

  private void addGUI() {
    JPanel panel = new JPanel();

    neededLabel = new JLabel("Maintenance Needed");
    neededArea = new JList<>(items);
    status = new JLabel("");
    location = new JLabel("");

    commentLabel = new JLabel("Comment");
    commentArea = new JTextArea("");

    reportFaults = new JButton("Report faults");
    complete = new JButton("Complete");
    repair = new JButton("Repair");

    JPanel leftPanel = new JPanel();
    leftPanel.setLayout(new BoxLayout(leftPanel, BoxLayout.Y_AXIS));
    JPanel rightPanel = new JPanel();
    rightPanel.setLayout(new BoxLayout(rightPanel, BoxLayout.Y_AXIS));

    commentArea.setSize(100, 100);

    leftPanel.add(neededLabel);
    leftPanel.add(neededArea);
    leftPanel.add(status);
    leftPanel.add(location);

    rightPanel.add(commentLabel);
    rightPanel.add(commentArea);
    
    JPanel buttons = new JPanel();
    buttons.add(reportFaults);
    buttons.add(repair);
    buttons.add(complete);
    rightPanel.add(buttons);

    panel.add(leftPanel, BorderLayout.WEST);
    panel.add(rightPanel, BorderLayout.EAST);

    setupGUIListeners();

    this.add(panel);
  }

  private void setupGUIListeners() {

    // Report button
    reportFaults.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        String mr = (String)neededArea.getSelectedValue();
        int mc = Integer.parseInt(mr);
        int status = db.getStatus(mc);
        if (status == ManagementRecord.READY_CLEAN_AND_MAINT) {
          db.setStatus(mc, ManagementRecord.FAULTY_AWAIT_CLEAN);
          db.faultsFound(mc, commentArea.getText());
        }
        if (status == ManagementRecord.CLEAN_AWAIT_MAINT) {
          db.setStatus(mc, ManagementRecord.AWAIT_REPAIR);
          db.faultsFound(mc, commentArea.getText());
        }
      }
    });

    // Repair button
    repair.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        String mr = (String)neededArea.getSelectedValue();
        db.setStatus(Integer.parseInt(mr), ManagementRecord.READY_CLEAN_AND_MAINT);
      }
    });

    // Complete button
    complete.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        String mr = (String)neededArea.getSelectedValue();
        db.setStatus(Integer.parseInt(mr), ManagementRecord.OK_AWAIT_CLEAN);
      }
    });

    // List selection listener (for location & status)
    neededArea.addListSelectionListener(new ListSelectionListener() {
      public void valueChanged(ListSelectionEvent e) {
        JList l = (JList)e.getSource();
        if (!l.getValueIsAdjusting()) {
          int mr = Integer.parseInt((String)l.getSelectedValue());
          status.setText("Status: " + db.getStatus(mr));
          String itemLocation = db.getItinerary(mr).getTo();
          location.setText("Location: " + itemLocation);
        }
      }
    });
  }

  @Override
  public void update(Observable o, Object arg) {
    // We want to display anything with the MR state READY_CLEAN_AND_MAINT and AWAIT_REPAIR
    items.clear();
    List<Integer> readyMRs = db.getWithStatus(ManagementRecord.READY_CLEAN_AND_MAINT);
    List<Integer> repairMRs = db.getWithStatus(ManagementRecord.AWAIT_REPAIR);
    for (int i : readyMRs)
      items.add(String.valueOf(i));
    for (int i : repairMRs)
      items.add(String.valueOf(i));
  }

}
