
// Generated by Together

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 * An interface to SAAMS: Maintenance Inspector Screen: Inputs events from the Maintenance Inspector, and displays aircraft information. This class is a
 * controller for the AircraftManagementDatabase: sending it messages to change the aircraft status information. This class also registers as an observer of the
 * AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element. See written documentation.
 *
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:node:::id4tg7xcko4qme4cko4swuu.node146
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 * @url element://model:project::SAAMS/design:view:::id4tg7xcko4qme4cko4swuu
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::id3y5z3cko4qme4cko4sw81
 */
public class MaintenanceInspector extends JFrame implements Observer, ActionListener {

    private static final String MAINTENANCE_INSPECTOR = "Maintenance Inspector";
    private final JLabel reportFaultsLabel = new JLabel("Report Faults");
    private final JLabel maintenanceNeededLabel = new JLabel("Maintenance(s) needed");
    private final JLabel logsLabel = new JLabel("Comment");

    private final JButton reportFaultsBtn = new JButton("Report Faults");
    private final JButton completeBtn = new JButton("Complete");

    private final JTextArea reportFaults = new JTextArea();

    private DefaultListModel<String> logsList = new DefaultListModel<>();
    private final JList logsTa = new JList(logsList);

    private DefaultListModel<String> planesIncoming = new DefaultListModel<>();
    private final JList planesTA = new JList(planesIncoming);

    /**
     * The Maintenance Inspector Screen interface has access to the AircraftManagementDatabase.
     *
     * @clientCardinality 1
     * @supplierCardinality 1
     * @label accesses/observes
     * @directed
     */
    private final AircraftManagementDatabase aircraftManagementDatabase;
    private int mrIndex;

    public MaintenanceInspector(AircraftManagementDatabase aircraftManagementDatabase) {
        super(MAINTENANCE_INSPECTOR);
        this.aircraftManagementDatabase = aircraftManagementDatabase;
        initGui();
        initButtons();
        initLabels();
        initTextFields();
        this.aircraftManagementDatabase.addObserver(this);
        setVisible(true);
    }

    public void initGui() {
        setLayout(null);
        setBackground(Color.CYAN);
        setLocation(1150, 5);
        setSize(750, 450);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }

    public void initLabels() {
        maintenanceNeededLabel.setBounds(5, 25, 150, 20);
        add(maintenanceNeededLabel);
        logsLabel.setBounds(500, 25, 150, 20);
        add(logsLabel);
        reportFaultsLabel.setBounds(220, 25, 150, 20);
        add(reportFaultsLabel);
    }

    public void initButtons() {
        reportFaultsBtn.setBounds(220, 275, 120, 30);
        add(reportFaultsBtn);
        reportFaultsBtn.addActionListener(this);
        completeBtn.setBounds(500, 275, 120, 30);
        add(completeBtn);
        completeBtn.addActionListener(this);
    }

    public void initTextFields() {
        planesTA.setBounds(5, 50, 150, 220);
        add(planesTA);
        reportFaults.setBounds(200, 50, 200,220);
        add(reportFaults);
        logsTa.setBounds(420, 50, 300, 220);
        add(logsTa);
    }

    public void displayFlightDetails() {
        int maxMRs = 10;
        for (int i = 0; i < maxMRs; i++) {
            if (aircraftManagementDatabase.getStatus(i) == ManagementRecord.READY_CLEAN_AND_MAINT
                    || aircraftManagementDatabase.getStatus(i) == ManagementRecord.AWAIT_REPAIR
            ) {
                if(!planesIncoming.contains(aircraftManagementDatabase.getFlightCode(i)))
                planesIncoming.addElement(aircraftManagementDatabase.getFlightCode(i));
            }

            if ( aircraftManagementDatabase.getStatus(i) == ManagementRecord.OK_AWAIT_CLEAN
                    || aircraftManagementDatabase.getStatus(i) == ManagementRecord.READY_REFUEL
            ) {
                if(planesIncoming.contains(aircraftManagementDatabase.getFlightCode(i)))
                    planesIncoming.removeElement(aircraftManagementDatabase.getFlightCode(i));
            }
        }
    }

    public void selectValue() {
        planesTA.addListSelectionListener(e -> {
            mrIndex = aircraftManagementDatabase.findMrIndex((String) planesTA.getSelectedValue());
        });
    }


    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == completeBtn) {

            if (aircraftManagementDatabase.getStatus(mrIndex) == ManagementRecord.READY_CLEAN_AND_MAINT) {
                aircraftManagementDatabase.setStatus(mrIndex, ManagementRecord.OK_AWAIT_CLEAN);
                logsList.addElement("Send aircraft to Cleaning Supervisor");
            }

            else if (aircraftManagementDatabase.getStatus(mrIndex) == ManagementRecord.AWAIT_REPAIR) {
                aircraftManagementDatabase.setStatus(mrIndex, ManagementRecord.READY_CLEAN_AND_MAINT);
                logsList.addElement("status: " + aircraftManagementDatabase.getStatus(mrIndex));
            }

            else if (aircraftManagementDatabase.getStatus(mrIndex) == ManagementRecord.CLEAN_AWAIT_MAINT) {
                aircraftManagementDatabase.setStatus(mrIndex, ManagementRecord.READY_REFUEL);
            }
        }

        if (e.getSource() == reportFaultsBtn) {
            if (aircraftManagementDatabase.getStatus(mrIndex) == ManagementRecord.READY_CLEAN_AND_MAINT) {
                aircraftManagementDatabase.faultsFound(mrIndex, reportFaults.getText());
                logsList.addElement(aircraftManagementDatabase.getFaultDescription(mrIndex));
            }

            else if (aircraftManagementDatabase.getStatus(mrIndex) == ManagementRecord.FAULTY_AWAIT_CLEAN) {
                logsList.removeAllElements();
                logsList.addElement("Send aircraft to Cleaning Supervisor");
            }

            else if (aircraftManagementDatabase.getStatus(mrIndex) == ManagementRecord.CLEAN_AWAIT_MAINT) {
                logsList.removeAllElements();
                logsList.addElement("Maintenance returned faults.");
            }
        }
    }

    @Override
    public void update(Observable o, Object arg) {
        selectValue();
        displayFlightDetails();
    }

}
