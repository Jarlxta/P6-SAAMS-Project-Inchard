
// Generated by Together


import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;


/**
 * An interface to SAAMS: Maintenance Inspector Screen: Inputs events from the Maintenance Inspector, and displays aircraft information. This class is a
 * controller for the AircraftManagementDatabase: sending it messages to change the aircraft status information. This class also registers as an observer of the
 * AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element. See written documentation.
 *
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:node:::id4tg7xcko4qme4cko4swuu.node146
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 * @url element://model:project::SAAMS/design:view:::id4tg7xcko4qme4cko4swuu
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::id3y5z3cko4qme4cko4sw81
 */
public class MaintenanceInspector extends JFrame implements Observer, ActionListener {

  private static final String MAINTENANCE_INSPECTOR = "Maintenance Inspector";
  private final JLabel currentStatusLabel = new JLabel("Current status");
  private final JLabel currentLocationLabel = new JLabel("Current location");
  private final JLabel maintenanceNeededLabel = new JLabel("Maintenance(s) needed");
  private final JLabel commentLabel = new JLabel("Comment");

  private final JButton reportFaultsBtn = new JButton("Report Faults");
  private final JButton completeBtn = new JButton("Complete");

  private DefaultListModel<String> planeList = new DefaultListModel<>();
  private final JList planeDetailsTA = new JList(planeList);

  private DefaultListModel<String> planesIncoming = new DefaultListModel<>();
  private final JList planesTA = new JList(planesIncoming);


  /**
   * The Maintenance Inspector Screen interface has access to the AircraftManagementDatabase.
   *
   * @clientCardinality 1
   * @supplierCardinality 1
   * @label accesses/observes
   * @directed
   */
  private final AircraftManagementDatabase aircraftManagementDatabase;
  private int mrIndex;
  public MaintenanceInspector(AircraftManagementDatabase aircraftManagementDatabase) {
    super(MAINTENANCE_INSPECTOR);
    this.aircraftManagementDatabase = aircraftManagementDatabase;
    initGui();
    initButtons();
    initLabels();
    initTextFields();
    this.aircraftManagementDatabase.addObserver(this);
    setVisible(true);
  }


  public void initGui() {
    setLayout(null);
    setBackground(Color.CYAN);
    setLocation(1150, 5);
    setSize(750, 450);
    setDefaultCloseOperation(EXIT_ON_CLOSE);
  }

  public void initLabels() {
    maintenanceNeededLabel.setBounds(100, 25, 150, 20);
    add(maintenanceNeededLabel);
    commentLabel.setBounds(500, 25, 150, 20);
    add(commentLabel);
    currentLocationLabel.setBounds(120, 285, 150, 20);
    add(currentStatusLabel);
    currentStatusLabel.setBounds(120, 270, 150, 20);
    add(currentLocationLabel);
  }

  public void initButtons() {
    reportFaultsBtn.setBounds(500, 275, 120, 30);
    add(reportFaultsBtn);
    reportFaultsBtn.addActionListener(this);
    completeBtn.setBounds(500, 310, 120, 30);
    add(completeBtn);
    completeBtn.addActionListener(this);
  }

  public void initTextFields() {
    planesTA.setBounds(130, 50, 100, 220);
    add(planesTA);
    planeDetailsTA.setBounds(400, 50, 300, 220);
    add(planeDetailsTA);
  }

  public void displayFlightDetails() {
      if (aircraftManagementDatabase.getStatus(mrIndex) == ManagementRecord.READY_CLEAN_AND_MAINT
              || aircraftManagementDatabase.getStatus(mrIndex) == ManagementRecord.AWAIT_REPAIR) {
        if(!planesIncoming.contains(aircraftManagementDatabase.getFlightCode(mrIndex)))
          planesIncoming.addElement(aircraftManagementDatabase.getFlightCode(mrIndex));
      }

      if (aircraftManagementDatabase.getStatus(mrIndex) == ManagementRecord.OK_AWAIT_CLEAN
              || aircraftManagementDatabase.getStatus(mrIndex) == ManagementRecord.READY_REFUEL) {
        planesIncoming.removeElement(aircraftManagementDatabase.getFlightCode(mrIndex));
    }
  }

  public void selectValue() {
    planesTA.addListSelectionListener(e -> {
      mrIndex = aircraftManagementDatabase.findMrIndex((String) planesTA.getSelectedValue());
      displayFlightDetails();
    });
  }

  @Override
  public void update(Observable o, Object arg) {
    selectValue();
    displayFlightDetails();
  }

  @Override
  public void actionPerformed(ActionEvent e) {
    if (e.getSource() == completeBtn) {

      if (aircraftManagementDatabase.getStatus(mrIndex) == ManagementRecord.READY_CLEAN_AND_MAINT) {
        aircraftManagementDatabase.setStatus(mrIndex, ManagementRecord.OK_AWAIT_CLEAN);
        planeList.add(0, "Send aircraft to Cleaning Supervisor");
      }

      if (aircraftManagementDatabase.getStatus(mrIndex) == ManagementRecord.AWAIT_REPAIR) {
        aircraftManagementDatabase.setStatus(mrIndex, ManagementRecord.READY_CLEAN_AND_MAINT);
        planeList.add(0, "status: " + aircraftManagementDatabase.getStatus(mrIndex));
      }

      if (aircraftManagementDatabase.getStatus(mrIndex) == ManagementRecord.CLEAN_AWAIT_MAINT) {
        aircraftManagementDatabase.setStatus(mrIndex, ManagementRecord.READY_REFUEL);
      }
    }

    if (e.getSource() == reportFaultsBtn) {
      if (aircraftManagementDatabase.getStatus(mrIndex) == ManagementRecord.READY_CLEAN_AND_MAINT) {
        aircraftManagementDatabase.faultsFound(mrIndex, "Maintenance returned faults. Send aircraft to Cleaning Supervisor");
        planeList.add(0, aircraftManagementDatabase.getFaultDescription(mrIndex));
        aircraftManagementDatabase.setStatus(mrIndex, ManagementRecord.FAULTY_AWAIT_CLEAN);
      }

      if (aircraftManagementDatabase.getStatus(mrIndex) == ManagementRecord.FAULTY_AWAIT_CLEAN) {
        planeList.removeAllElements();
        planeList.add(0, "Send aircraft to Cleaning Supervisor");
      }

      if (aircraftManagementDatabase.getStatus(mrIndex) == ManagementRecord.CLEAN_AWAIT_MAINT) {
        planeList.removeAllElements();
        planeList.add(0, "Maintenance returned faults.");
      }
    }

  }
}
