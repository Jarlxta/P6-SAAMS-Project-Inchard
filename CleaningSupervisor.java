
// Generated by Together

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

public class CleaningSupervisor extends JFrame implements Observer, ActionListener, ListSelectionListener {

  /**
   * The Cleaning Supervisor Screen interface has access to the
   * AircraftManagementDatabase.
   *
   * @clientCardinality 1
   * @supplierCardinality 1
   * @label accesses/observes
   * @directed
   */
  private AircraftManagementDatabase db;

  private JButton button;
  private JLabel label;
  private DefaultListModel<String> planesList = new DefaultListModel<>();
  private JList displayPlanes;
  private Vector<String> items = new Vector<String>();
  private List<String> statuses;
  private int currentPlaneIndex;

  public CleaningSupervisor(AircraftManagementDatabase db) {
    super("Cleaning Supervisor");
    this.currentPlaneIndex = -1;
    this.setLayout(null);
    this.setSize(500, 500);
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    addGUI();
    this.setVisible(true);

    this.db = db;
    this.db.addObserver(this);
  }

  private void addGUI() {

    Color blueberry = new Color(114, 137, 218);
//    Color grey = new Color(35, 39, 42);
//    Color lightgrey = new Color(44, 47, 51);

    Container window = getContentPane();
//    window.setBackground(grey);
    label = new JLabel("Planes list");
    button = new JButton("Clean Airplane");
    displayPlanes = new JList<>(planesList);
    //displayPlanes.setBackground(lightgrey);
    //displayPlanes.setForeground(Color.WHITE);

    label.setBounds(100, 5, 100, 15);
    label.setVisible(true);
    button.setBounds(270, 45, 200, 30);
    button.setVisible(true);
    displayPlanes.setBounds(5, 20, 260, 435);
    displayPlanes.setBorder(BorderFactory.createLineBorder(blueberry, 1));
    displayPlanes.addListSelectionListener(this);
    displayPlanes.setVisible(true);

    add(label);
    add(displayPlanes);
    add(button);

    button.addActionListener(this);

    statuses = new ArrayList<String>();
    statuses.add("FREE");
    statuses.add("IN TRANSIT");
    statuses.add("WANTING_TO_LAND");
    statuses.add("GROUND_CLEARANCE_GRANTED");
    statuses.add("LANDING");
    statuses.add("LANDED");
    statuses.add("TAXXING");
    statuses.add("UNLOADING");
    statuses.add("READY_CLEAN_AND_MAINT");
    statuses.add("FAULTY_AWAITING_CLEAN");
    statuses.add("CLEAN_AWAIT_MAINT");
    statuses.add("OK_AWAIT_CLEAN");
    statuses.add("AWAIT_REPAIR");
    statuses.add("READY_REFUEL");
    statuses.add("READY_PASSENGERS");
    statuses.add("READY_DEPART");
    statuses.add("AWAITING_TAXI");
    statuses.add("AWAITING_TAKEOFF");
    statuses.add("DEPARTING_THROUGH_LOCAL_AIRSPACE");
  }

  @Override
  public void update(Observable o, Object arg) {
    List<Integer> validMCodes = db.getWithStatus(8);
    validMCodes.addAll(db.getWithStatus(9));
    validMCodes.addAll(db.getWithStatus(11));

    planesList.clear();
    for (int i = 0; i < validMCodes.size(); i++){
      planesList.addElement(db.getFlightCode(i) + " - " + statuses.get(db.getStatus(i)));
    }
  }

  public void actionPerformed(ActionEvent e) {
    if (e.getSource() == button){

      if (currentPlaneIndex == -1){
        JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Cleaning Supervisor: You need to select an aircraft.");
      }
      else {
        JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Cleaning Supervisor: Crew sent for cleaning, plane status updated.");
        if (db.getStatus(currentPlaneIndex) == statuses.indexOf("READY_CLEAN_AND_MAINT")){
          db.setStatus(currentPlaneIndex, statuses.indexOf("CLEAN_AWAIT_MAINT"));
        }
        else if (db.getStatus(currentPlaneIndex) == statuses.indexOf("FAULTY_AWAITING_CLEAN")){
          db.setStatus(currentPlaneIndex, statuses.indexOf("AWAIT_REPAIR"));
        }
        else if (db.getStatus(currentPlaneIndex) == statuses.indexOf("OK_AWAIT_CLEAN")){
          db.setStatus(currentPlaneIndex, statuses.indexOf("READY_REFUEL"));
        }
      }
    }
  }

  @Override
  public void valueChanged(ListSelectionEvent e) {
    if (e.getValueIsAdjusting()) {
      currentPlaneIndex = displayPlanes.getSelectedIndex();
    }
  }
}
