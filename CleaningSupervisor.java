
// Generated by Together

import javax.swing.*;
import java.util.*;
import java.awt.event.*;

/**
 * An interface to SAAMS:
 * Cleaning Supervisor Screen:
 * Inputs events from the Cleaning Supervisor, and displays aircraft
 * information.
 * This class is a controller for the AircraftManagementDatabase: sending it
 * messages to change the aircraft status information.
 * This class also registers as an observer of the AircraftManagementDatabase,
 * and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 * 
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id3y5z3cko4qme4cko4sw81
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class CleaningSupervisor extends JFrame implements Observer {

  /**
   * The Cleaning Supervisor Screen interface has access to the
   * AircraftManagementDatabase.
   * 
   * @clientCardinality 1
   * @supplierCardinality 1
   * @label accesses/observes
   * @directed
   */
  private AircraftManagementDatabase db;

  private JButton button;
  private JLabel label;
  private JList list;
  private Vector<String> items = new Vector<String>();

  public CleaningSupervisor(AircraftManagementDatabase db) {
    super("Cleaning Supervisor");
    this.setSize(500, 500);
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    addGUI();
    this.setVisible(true);

    this.db = db;
  }

  private void addGUI() {

    JPanel panel = new JPanel();

    label = new JLabel("Planes list (MR Code)");
    button = new JButton("Clean Airplane");
    list = new JList<>(items);

    button.setSize(10, 10);

    panel.add(label);
    panel.add(list);
    panel.add(button);

    button.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        int mr = (int)list.getSelectedValue();
        db.setStatus(mr, ManagementRecord.CLEAN_AWAIT_MAINT);
        if (db.getStatus(mr) == ManagementRecord.OK_AWAIT_CLEAN) {
          db.setStatus(mr, ManagementRecord.READY_REFUEL);
        }
        if (db.getStatus(mr) == ManagementRecord.FAULTY_AWAIT_CLEAN) {
          db.setStatus(mr, ManagementRecord.AWAIT_REPAIR);
        }
        if (db.getStatus(mr) == ManagementRecord.READY_CLEAN_AND_MAINT) {
          db.setStatus(mr, ManagementRecord.CLEAN_AWAIT_MAINT);
        }
      }
    });
    this.add(panel);
  }

  @Override
  public void update(Observable o, Object arg) {
    addWithCode(ManagementRecord.OK_AWAIT_CLEAN);
    addWithCode(ManagementRecord.FAULTY_AWAIT_CLEAN);
    addWithCode(ManagementRecord.READY_CLEAN_AND_MAINT);
  }

  private void addWithCode(int code) {
    items.clear();
    int[] mCodes = db.getWithStatus(code);
    for (int i : mCodes)
      items.add(Integer.toString(i));
  }

}
