
// Generated by Together

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

/**
 * An interface to SAAMS: Cleaning Supervisor Screen: Inputs events from the Cleaning Supervisor, and displays aircraft information. This class is a controller
 * for the AircraftManagementDatabase: sending it messages to change the aircraft status information. This class also registers as an observer of the
 * AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element. See written documentation.
 *
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id3y5z3cko4qme4cko4sw81
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class CleaningSupervisor extends JFrame implements Observer, ActionListener {

    /**
     * The Cleaning Supervisor Screen interface has access to the AircraftManagementDatabase.
     *
     * @clientCardinality 1
     * @supplierCardinality 1
     * @label accesses/observes
     * @directed
     */
    private final JLabel planeListLabel = new JLabel("Planes list: MR codes(gate number)");
    private DefaultListModel<String> planesIncoming = new DefaultListModel<>();
    private final JList planesTA = new JList(planesIncoming);
    private final JButton cleanAirplaneBtn = new JButton("Clean Airplane");
    private final JLabel noPlaneSelectedLabel = new JLabel("No Planes Selected");

    private AircraftManagementDatabase aircraftManagementDatabase;

    public CleaningSupervisor(AircraftManagementDatabase aircraftManagementDatabase) {
        super("Cleaning Supervisor Controller");
        this.aircraftManagementDatabase = aircraftManagementDatabase;
        initGui();
        initButtons();
        initTextFields();
        initLabels();
        this.aircraftManagementDatabase.addObserver(this);
        setVisible(true);
    }

    public void initGui() {
        setLayout(null);
        setBackground(Color.CYAN);
        setLocation(900, 700);
        setSize(400, 350);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }

    public void initLabels() {
        planeListLabel.setBounds(10, 10, 400, 20);
        add(planeListLabel);
        noPlaneSelectedLabel.setBounds(120, 270, 150, 20);
        add(noPlaneSelectedLabel);
    }

    public void initButtons() {
        cleanAirplaneBtn.setBounds(230, 125, 120, 30);
        add(cleanAirplaneBtn);
    }

    public void initTextFields() {
        planesTA.setVisible(true);
        planesTA.setBounds(50, 45, 160, 220);
        add(planesTA);
    }


    @Override
    public void actionPerformed(ActionEvent e) {

    }

    @Override
    public void update(Observable o, Object arg) {

    }
}
