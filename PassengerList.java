// Generated by Together


import java.util.ArrayList;

/**
 * Contains an array of PassengerDetails objects - one per passenger on a flight.
 * Incoming flights supply their passenger list in their flight descriptor, and the ManagementRecord for the flight extracts the PassengerList and holds it separately.
 * Outbound flights have PassengerLists built from passenger details supplied by the gate consoles, and the list is uploaded to the aircraft as it departs in a newly built FlightDescriptor.
 * @stereotype entity
 * @url element://model:project::SAAMS/design:view:::id1un8dcko4qme4cko4sw27
 * @url element://model:project::SAAMS/design:view:::id1jkohcko4qme4cko4svww
 */
public class PassengerList {
  /**
 * The array of PassengerDetails objects.
 * @byValue
 * @clientCardinality 1
 * @directed true
 * @label contains
 * @shapeType AggregationLink
 * @supplierCardinality 0..*
 */

  // Changed from an Array to an ArrayList so that a flight does not need to have a set number of passengers.
  private ArrayList<PassengerDetails> passengerList;

  public PassengerList() {
    passengerList = new ArrayList<>();
  }

/**
 * The given passenger is boarding.
 * Their details are recorded, in the passenger list.
 * @preconditions Status is READY_PASSENGERS
 */
  public void addPassenger(PassengerDetails details, int status){
    // Ready Passengers is an INT value; 14, according to the variables in Management Record.
    // IN_TRANSIT and WANTING_TO_LAND are INT values of 1 & 2 respectively
    if (status != 14 && status != 1 && status != 2){
      System.out.println("ERROR IN PASSENGERLIST: STATUS NOT VALID WHEN ADDING PASSENGER.");
      return;
    }

    passengerList.add(details);
  }

  public PassengerDetails getElement(int i){
    return passengerList.get(i);
  }

  /**
   * Returns the length of the passenger list;
   * this gives an idea of the currently occupied seating on the plane.
   */
  public int getListLength(){
    return passengerList.size();
  }

  // Allows you to simply print the Passenger List Details by use of a toString call.
  // Might not be useful, but who knows.
  // Helpful for debugging to make sure the lists are properly populated.
  public String toString() {
    String list = "";

    for (int i = 0; i<passengerList.size(); i++){
      list = list.concat(passengerList.get(i).getName()) + "\n";
      if (i != passengerList.size()-1){
        list = list.concat(",");
      }
    }

    return list;
  }
}
