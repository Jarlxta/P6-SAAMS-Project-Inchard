import java.util.*;

// Generated by Together

/**
 * A central database ("model" class):
 * It is intended that there will be only one instance of this class.
 * Maintains an array of Gates.
 * Each gate's number is its index in the array (0..)
 * GateConsoles and GroundOperationsControllers are controllers of this class: sending it messages when the gate status is to be changed.
 * GateConsoles and GroundOperationsControllers also register as observers of this class. Whenever a change occurs to any gate, the obervers are notified.
 *
 * @stereotype model
 * @url element://model:project::SAAMS/design:view:::id2wdkkcko4qme4cko4svm2
 * @url element://model:project::SAAMS/design:view:::id1jkohcko4qme4cko4svww
 * @url element://model:project::SAAMS/design:node:::id1un8dcko4qme4cko4sw27.node61
 * @url element://model:project::SAAMS/design:view:::id1un8dcko4qme4cko4sw27
 */
public class GateInfoDatabase extends Observable {
  /**
   *  A constant: the number of aircraft gates at the airport.
   */
  public int maxGateNumber = 2;
  /**
 * Holds one gate object per gate in the airport.
 * @clientCardinality 1
 * @directed true
 * @label contains
 * @link aggregationByValue
 * @supplierCardinality 0..*
 */
  private Gate[] gates = new Gate[maxGateNumber];
  
  /*
   * Constructor, instantiates the gates
   * Status is free by default when gate is created
   */
  public GateInfoDatabase(){
	  for(int i = 0; i < maxGateNumber; i++) {
		  gates[i] = new Gate();
	  }
		
  }
/**
 * Obtain and return the status of the given gate identified by the gateNumber parameter.
 * Returns java.lang.ArrayIndexOutOfBoundsException if gate does not exist.
 */	
  public int getStatus(int gateNumber){ 
	  try {
		  return gates[gateNumber].getStatus();	  
	  }catch(ArrayIndexOutOfBoundsException e) {
		  System.out.println("Gate: " + gateNumber + ", does not exist.");
	  }
	  //Since 0 = free status, return -1 if error instead
	  return -1;
  }


    /**
     * Obtain and return the status of the given gate identified by the gateNumber parameter.
     * Returns java.lang.ArrayIndexOutOfBoundsException if gate does not exist.
     */
    public int getStatus(int gateNumber) {
//	  return gates[gateNumber].getStatus();
        try {
            return gates[gateNumber].getStatus();
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Gate: " + gateNumber + ", does not exist.");
        }
        //Since 0 = free status, return -1 if error instead
        return -1;
    }

    /**
     * Returns an array containing the status of all gates.
     * For data collection by the GOC.
     *
     * @return
     */
    public int[] getStatuses() {
        int[] statuses = new int[maxGateNumber];
        for (int i = 0; i < maxGateNumber; i++) {
            statuses[i] = gates[i].getStatus();
        }
        setChanged();
        notifyObservers();
        return statuses;
    }

    /**
     * Forward a status change request to the given gate identified by the gateNumber parameter.
     * Called to allocate a free gate to the aircraft identified by mCode.
     */
    public void allocate(int gateNumber, int mCode) {
        try {
            //Gate allocate handles validation
            gates[gateNumber].allocate(mCode);
            setChanged();
            notifyObservers();
            //If gateNumber is not valid
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Cannot allocate - Gate: " + gateNumber + ", does not exist.");
        }
    }

    /**
     * Returns an array of mCodes:
     * Just the mCodes of those MRs with the given status supplied as a parameter.
     * Principally for call by the various interface screens.
     */
// Todo : change the method to apply on arraylists.
    public List<Integer> getWithStatus(int statusCode) {
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < maxGateNumber; i++) {
            if (gates[i].getStatus() == statusCode) list.add(i);
        }
        return list;
    }

    /**
     * Forward a status change request to the given gate identified by the gateNumber parameter.
     * Called to indicate that the expected aircraft has arrived at the gate.
     */
    public void docked(int gateNumber) {
        try {
            gates[gateNumber].docked();
            setChanged();
            notifyObservers();
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Cannot dock - Gate: " + gateNumber + ", does not exist.");
        }
    }

    /**
     * Forward a status change request to the given gate identified by the gateNumber parameter. Called to indicate that the aircraft has departed and that the gate is now free.
     */
    public void departed(int gateNumber) {
        try {
            gates[gateNumber].departed();
//TODO    setChanged();
//TODO	  notifyObservers();
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Cannot depart - Gate: " + gateNumber + ", does not exist.");
        }
    }

    public int getManagementRecordFromGate(int i) {
        return gates[i].getMCode();
    }

    public String statusToText(int status) {
        if (status == 0) {
            return "FREE";
        }

        if (status == 1) {
            return "RESERVED";
        }

        if (status == 2) {
            return "OCCUPIED";
        }
        return "NOT VALID STATUS";
    }
}
