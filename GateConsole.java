
// Generated by Together


import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

/**
 * An interface to SAAMS:
 * Gate Control Console:
 * Inputs events from gate staff, and displays aircraft and gate information.
 * This class is a controller for the GateInfoDatabase and the AircraftManagementDatabase: sends messages when aircraft dock, have finished disembarking, and are fully emarked and ready to depart.
 * This class also registers as an observer of the GateInfoDatabase and the
 * AircraftManagementDatabase, and is notified whenever any change occurs in those <<model>> elements.
 * See written documentation.
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id1un8dcko4qme4cko4sw27
 * @url element://model:project::SAAMS/design:view:::id1jkohcko4qme4cko4svww
 * @url element://model:project::SAAMS/design:node:::id1un8dcko4qme4cko4sw27.node61
 */
public class GateConsole extends JFrame implements Observer, ActionListener {


  private final static String GATE = "Gate";
  private final JLabel gateStatusLabel = new JLabel("Gate Status");
  private final JLabel planeStatusLabel = new JLabel("Plane Status");
  private final JLabel flightCodeLabel = new JLabel("Flight Code");
  private final JLabel flightFromLabel = new JLabel("Flight From");
  private final JLabel flightToLabel = new JLabel("Flight To");
  private final JLabel nextStopLabel = new JLabel("Next Stop");
  private final JLabel noOfPassengersLabel = new JLabel("No. of Passengers");
  private final JLabel passengerNameLabel = new JLabel("Passenger Name");

  private final JTextField gateStatusTF= new JTextField("");
  private final JTextField planeStatusTF = new JTextField("");
  private final JTextField flightCodeTF= new JTextField("");
  private final JTextField flightFromTF= new JTextField("");
  private final JTextField flightToTF = new JTextField("");
  private final JTextField nextStopTF = new JTextField("");
  private final JTextField noOfPassengersTF = new JTextField("");
  private final JTextField passengerNameTF = new JTextField("");

  private final JButton planeDockedBtn = new JButton("Plane Docked");
  private final JButton planeUnloadedBtn = new JButton("Plane Unloaded");
  private final JButton flightReadyToDepartBtn = new JButton("Flight Ready To Depart");
  private final JButton addPassengerBtn = new JButton("Add Passenger");

  private DefaultListModel<String> passengerDefaultList = new DefaultListModel<>();
  private final JList passengerList = new JList(passengerDefaultList);

  /**
  *  The GateConsole interface has access to the GateInfoDatabase.
  * @supplierCardinality 1
  * @clientCardinality 0..*
  * @label accesses/observes
  * @directed*/
  GateInfoDatabase gateInfoDatabase;

/**
  *  The GateConsole interface has access to the AircraftManagementDatabase.
  * @supplierCardinality 1
  * @clientCardinality 0..*
  * @directed
  * @label accesses/observes*/
  private AircraftManagementDatabase aircraftManagementDatabase;

/**
 * This gate's gateNumber
 * - for identifying this gate's information in the GateInfoDatabase.
 */
  private int gateNumber;

  public GateConsole (AircraftManagementDatabase aircraftManagementDatabase, GateInfoDatabase gateInfoDatabase,
                      int gateNumber) {
    super(GATE);
    this.aircraftManagementDatabase = aircraftManagementDatabase;
    this.gateInfoDatabase = gateInfoDatabase;
    this.gateNumber = gateNumber;
    this.aircraftManagementDatabase.addObserver(this);
    this.gateInfoDatabase.addObserver(this);
    initiateGUI();
    createLabels();
    createButtons();
    createTextFields();


    setVisible(true);
  }

  public void createLabels() {
    gateStatusLabel.setBounds(180, 20, 150, 20);
    add(gateStatusLabel);
    planeStatusLabel.setBounds(180, 50, 100, 20);
    add(planeStatusLabel);
    flightCodeLabel.setBounds(180, 80, 100, 20);
    add(flightCodeLabel);
    flightFromLabel.setBounds(180, 110, 100, 20);
    add(flightFromLabel);
    flightToLabel.setBounds(180, 140, 100, 20);
    add(flightToLabel);
    nextStopLabel.setBounds(180, 170, 150, 20);
    add(nextStopLabel);
    noOfPassengersLabel.setBounds(180, 200, 150, 20);
    add(noOfPassengersLabel);
    passengerNameLabel.setBounds(180, 230, 150, 20);
    add(passengerNameLabel);

  }

  public void createButtons() {
    planeDockedBtn.setBounds(220, 260, 200, 30);
    add(planeDockedBtn);
    planeUnloadedBtn.setBounds(220, 290, 200, 30);
    add(planeUnloadedBtn);
    flightReadyToDepartBtn.setBounds(220, 320, 200, 30);
    add(flightReadyToDepartBtn);
    addPassengerBtn.setBounds(220, 350, 200, 30);
    add(addPassengerBtn);

  }

  public void createTextFields() {
    passengerList.setVisible(true);
    passengerList.setBounds(5, 20, 160, 180);
    add(passengerList);

    gateStatusTF.setEditable(false);
    gateStatusTF.setBounds(300, 20, 180, 25);
    add(gateStatusTF);
    planeStatusTF.setEditable(false);
    planeStatusTF.setBounds(300, 50, 180, 25);
    add(planeStatusTF);
    flightCodeTF.setEditable(false);
    flightCodeTF.setBounds(300, 80, 180, 25);
    add(flightCodeTF);
    flightFromTF.setEditable(false);
    flightFromTF.setBounds(300, 110, 180, 25);
    add(flightFromTF);
    flightToTF.setEditable(false);
    flightToTF.setBounds(300, 140, 180, 25);
    add(flightToTF);
    nextStopTF.setEditable(false);
    nextStopTF.setBounds(300, 170, 180, 25);
    add(nextStopTF);
    noOfPassengersTF.setEditable(false);
    noOfPassengersTF.setBounds(300, 200, 180, 25);
    add(noOfPassengersTF);
    passengerNameTF.setEditable(true);
    passengerNameTF.setBounds(300, 230, 180, 25);
    add(passengerNameTF);
  }

  public void initiateGUI() {
    setLayout(null);
    setTitle(GATE + gateNumber);
    setBackground(Color.CYAN);
    setLocation(40, 40);
    setSize(550, 500);
    setDefaultCloseOperation(EXIT_ON_CLOSE);
  }



//  //todo: replace length 10 with getSize from amdb (create method in there)
//  private void addPassengerToMr() {
//    for (int i = 0; i < 10; i++) {
//      if (aircraftManagementDatabase.getFlightCode(i) != null) {
//        if (aircraftManagementDatabase.getFlightCode(i).equals(.getSelectedValue())) {
//          aircraftManagementDatabase.addPassenger(i, new PassengerDetails(passengerNameTF.getText()));
//        }
//      }
//    }
//  }

  @Override
  public void update(Observable o, Object arg) {

  }

  @Override
  public void actionPerformed(ActionEvent e) {

  }
}
