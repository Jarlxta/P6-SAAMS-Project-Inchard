import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

// Generated by Together


/**
 * An interface to SAAMS:
 * Gate Control Console:
 * Inputs events from gate staff, and displays aircraft and gate information.
 * This class is a controller for the GateInfoDatabase and the AircraftManagementDatabase: sends messages when aircraft dock, have finished disembarking, and are fully emarked and ready to depart.
 * This class also registers as an observer of the GateInfoDatabase and the
 * AircraftManagementDatabase, and is notified whenever any change occurs in those <<model>> elements.
 * See written documentation.
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id1un8dcko4qme4cko4sw27
 * @url element://model:project::SAAMS/design:view:::id1jkohcko4qme4cko4svww
 * @url element://model:project::SAAMS/design:node:::id1un8dcko4qme4cko4sw27.node61
 */
public class GateConsole extends JFrame implements Observer, ActionListener{
/**
  *  The GateConsole interface has access to the GateInfoDatabase.
  * @supplierCardinality 1
  * @clientCardinality 0..*
  * @label accesses/observes
  * @directed*/
  private static GateInfoDatabase gateInfoDatabase = new GateInfoDatabase();

/**
  *  The GateConsole interface has access to the AircraftManagementDatabase.
  * @supplierCardinality 1
  * @clientCardinality 0..*
  * @directed
  * @label accesses/observes*/
  private AircraftManagementDatabase aircraftManagementDatabase;
  /**
   * This gate's gateNumber
   * - for identifying this gate's information in the GateInfoDatabase.
   */
  private int gateNumber;
  private final String gateConsole = "Gate " + (gateNumber + 1);

  //JLabels
  private final JLabel gateStatusJL = new JLabel("Gate Status:", SwingConstants.RIGHT);
  private final JLabel planeStatusJL = new JLabel("Plane Status:", SwingConstants.RIGHT);
  private final JLabel flightCodeJL = new JLabel("Flight code:", SwingConstants.RIGHT);
  private final JLabel flightFromJL = new JLabel("Flight From:", SwingConstants.RIGHT);
  private final JLabel flightToJL = new JLabel("Flight To:", SwingConstants.RIGHT);
  private final JLabel nextStopJL = new JLabel("Next Stop:", SwingConstants.RIGHT);
  private final JLabel numberOfPassengersJL = new JLabel("Number of passengers:", SwingConstants.RIGHT);
  private final JLabel passengerNameJL = new JLabel("Passenger Name:", SwingConstants.RIGHT);
  
  //JTextFields
  private final JTextField gateStatusTF = new JTextField();
  private final JTextField planeStatusTF = new JTextField();
  private final JTextField flightCodeTF = new JTextField();
  private final JTextField flightFromTF = new JTextField();
  private final JTextField flightToTF = new JTextField();
  private final JTextField nextStopTF = new JTextField();
  private final JTextField numberOfPassengersTF = new JTextField();
  private final JTextField passengerNameTF = new JTextField();
  
  //JButtons
  private final JButton planeDockedBtn = new JButton("Plane Docked");
  private final JButton planeUnloadedBtn = new JButton("Plane Unloaded");
  private final JButton readyToDepartBtn = new JButton("Flight Ready To Depart");
  private final JButton addPassengerBtn = new JButton("Add Passenger");
  
  //JList and view
  private DefaultListModel<String> passengerListModel = new DefaultListModel<>();
  private final JList passengerList = new JList(passengerListModel);
  
  
  public GateConsole(int gate, AircraftManagementDatabase aircraftDB) {
	  
	    //If the gate does not exist it returns -1, and GUI is not created
	    if(gateInfoDatabase.getStatus(gate) == -1) {
	    	System.out.println(gate + " does not exist");
	    	return;
	    }
	    this.gateNumber = gate;
	    this.aircraftManagementDatabase = aircraftDB;
	    
	    // gui instantiation
	    initiateGUI();
	    createLabels();
	    createButtons();
	    createTextFields();
	  
	    // apply pattern
	    this.aircraftManagementDatabase.addObserver(this);
	    this.gateInfoDatabase.addObserver(this);
	    setVisible(true);
	  }

	  public void createLabels() {
	    gateStatusJL.setBounds(200, 20, 150, 20);
	    add(gateStatusJL);
	    planeStatusJL.setBounds(200, 40, 150, 20);
	    add(planeStatusJL);
	    flightCodeJL.setBounds(200, 60, 150, 20);
	    add(flightCodeJL);
	    flightFromJL.setBounds(200, 80, 150, 20);
	    add(flightFromJL);
	    flightToJL.setBounds(200, 100, 150, 20);
	    add(flightToJL);
	    nextStopJL.setBounds(200, 120, 150, 20);
	    add(nextStopJL);
	    numberOfPassengersJL.setBounds(200, 140, 150, 20);
	    add(numberOfPassengersJL);
	    passengerNameJL.setBounds(200, 160, 150, 20);
	    add(passengerNameJL);
	  }

	  public void createButtons() {
		planeDockedBtn.setBounds(270, 190, 200, 30);
	    add(planeDockedBtn);
	    planeUnloadedBtn.setBounds(270, 220, 200, 30);
	    add(planeUnloadedBtn);
	    readyToDepartBtn.setBounds(270, 250, 200, 30);
	    add(readyToDepartBtn);
	    addPassengerBtn.setBounds(270, 280, 200, 30);
	    add(addPassengerBtn);
	  }

	  public void createTextFields() {
		gateStatusTF.setBounds(360, 20, 150, 20);
	    add(gateStatusTF);
	    planeStatusTF.setBounds(360, 40, 150, 20);
	    add(planeStatusTF);
	    flightCodeTF.setBounds(360, 60, 150, 20);
	    add(flightCodeTF);
	    flightFromTF.setBounds(360, 80, 150, 20);
	    add(flightFromTF);
	    flightToTF.setBounds(360, 100, 150, 20);
	    add(flightToTF);
	    nextStopTF.setBounds(360, 120, 150, 20);
	    add(nextStopTF);
	    numberOfPassengersTF.setBounds(360, 140, 150, 20);
	    add(numberOfPassengersTF);
	    passengerNameTF.setBounds(360, 160, 150, 20);
	    add(passengerNameTF);
		  
	    //Passenger JList
	    passengerList.setVisible(true);
	    passengerList.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1,Color.BLACK));
	    passengerList.setBounds(10, 20, 200, 300);
	    add(passengerList);
	  }

	  public void initiateGUI() {
	    setLayout(null);
	    setTitle(gateConsole);
	    setBackground(Color.CYAN);
	    setLocation(40, 40);
	    setSize(600, 400);
	    setDefaultCloseOperation(EXIT_ON_CLOSE);
	  }

	  @Override
	  public void actionPerformed(ActionEvent e) {
	  }

	  @Override
	  public void update(Observable o, Object arg) {
	  }

}
