
// Generated by Together


import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

/**
 * An interface to SAAMS:
 * Public Information Screen:
 * Display of useful information about aircraft.
 * This class registers as an observer of the AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 * @stereotype boundary/view
 * @url element://model:project::SAAMS/design:view:::id28ykdcko4qme4cko4sx0e
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class PublicInfo extends JFrame implements Observer {
/**
  * Each Public Information Screen interface has access to the AircraftManagementDatabase.
  * @supplierCardinality 1
  * @clientCardinality 0..*
  * @label accesses/observes
  * @directed*/
  private AircraftManagementDatabase db;
  private String[] columnNames = {"Flight", "Travelling from", "Routing towards", "Final destination", "Gate", "Status"};
  private List<List<String>> data = new ArrayList<>();

  private DefaultTableModel model;
  private JTable table;
  private JScrollPane tableHolder;
  private List<String> statuses;

  public PublicInfo (AircraftManagementDatabase AMDatabase){
    super("Public Information Display");
    this.db = AMDatabase;
    db.addObserver(this);
    Container window = getContentPane();
    initiateGUI(window);
    initiateTable();
    model.setRowCount(0);
    setVisible(true);

    statuses = new ArrayList<String>();
    statuses.add("FREE");
    statuses.add("IN TRANSIT");
    statuses.add("WANTING_TO_LAND");
    statuses.add("GROUND_CLEARANCE_GRANTED");
    statuses.add("LANDING");
    statuses.add("LANDED");
    statuses.add("TAXXING");
    statuses.add("UNLOADING");
    statuses.add("READY_CLEAN_AND_MAINT");
    statuses.add("FAULTY_AWAITING_CLEAN");
    statuses.add("CLEAN_AWAIT_MAINT");
    statuses.add("OK_AWAIT_CLEAN");
    statuses.add("AWAIT_REPAIR");
    statuses.add("READY_REFUEL");
    statuses.add("READY_PASSENGERS");
    statuses.add("READY_DEPART");
    statuses.add("AWAITING_TAXI");
    statuses.add("AWAITING_TAKEOFF");
    statuses.add("DEPARTING_THROUGH_LOCAL_AIRSPACE");
  }

  public void initiateTable(){
    model = new DefaultTableModel(columnNames, 10);
    table = new JTable(model);
    table.setVisible(true);

    tableHolder = new JScrollPane(table);

    add(tableHolder, BorderLayout.CENTER);
  }
  public void initiateGUI(Container win) {
    setLayout(new BorderLayout());
    setLocation(1000, 800);
    setSize(800, 223);
    setDefaultCloseOperation(EXIT_ON_CLOSE);
  }

  @Override
  public void update(Observable o, Object arg) {

    model.setRowCount(0);
    List<String> planeData = new ArrayList<>();
    Itinerary itinerary;
    int maxMR = 10;

    for (int i=0; i < maxMR; i++){
      if (db.getStatus(i) != 0){
        planeData.clear();
        planeData.add(db.getFlightCode(i));
        itinerary = db.getItinerary(i);
        planeData.add(itinerary.getFrom());
        planeData.add(itinerary.getNext());
        planeData.add(itinerary.getTo());
        planeData.add(db.getGate(i) == 0 ? "N/A" : Integer.toString(db.getGate(i)));
        planeData.add(statuses.get(db.getStatus(i)));

        model.addRow(planeData.toArray());
      }
    }
  }
}
