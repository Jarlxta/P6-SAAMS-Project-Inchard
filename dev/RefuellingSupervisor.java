package dev;// Generated by Together

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

/**
 * An interface to SAAMS:
 * Refuelling Supervisor Screen:
 * Inputs events from the Refuelling Supervisor, and displays aircraft information.
 * This class is a controller for the dev.AircraftManagementDatabase: sending it messages to change the aircraft status information.
 * This class also registers as an observer of the dev.AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 *
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::id3y5z3cko4qme4cko4sw81
 */
public class RefuellingSupervisor extends JFrame implements Observer, ActionListener {
  /**
   * The Refuelling Supervisor Screen interface has access to the dev.AircraftManagementDatabase.
   *
   * @supplierCardinality 1
   * @clientCardinality 1
   * @label accesses/observes
   * @directed
   */
  private AircraftManagementDatabase aircraftManagementDatabase;

  private final static String REFUELLING_SUPERVISOR = "Refuelling Supervisor";

  private final JLabel planesBeingRefuelledLabel = new JLabel("Planes Being Refuelled");
  private final DefaultListModel<String> planesIncoming = new DefaultListModel<>();
  private final JList planesTA = new JList(planesIncoming);
  private final JButton refuelPlaneBtn = new JButton("Plane is Refuelled");

  int mrIndex;

  public RefuellingSupervisor(AircraftManagementDatabase aircraftManagementDatabase) {
    super(REFUELLING_SUPERVISOR);
    this.aircraftManagementDatabase = aircraftManagementDatabase;
    intiGui();
    this.aircraftManagementDatabase.addObserver(this);
    refuelPlaneBtn.addActionListener(this);
    setVisible(true);
  }

  public void intiGui() {
    setLayout(null);
    setDefaultCloseOperation(EXIT_ON_CLOSE);
    setSize(360, 290);
    setLocation(700, 600);
    setBackground(Color.LIGHT_GRAY);
    setResizable(false);
    setTitle(REFUELLING_SUPERVISOR);

    planesBeingRefuelledLabel.setBounds(10, 5, 150, 20);
    add(planesBeingRefuelledLabel);

    planesTA.setBounds(15, 25, 150, 230);
    add(planesTA);

    refuelPlaneBtn.setBounds(170, 25, 150, 20);
    refuelPlaneBtn.addActionListener(this);
    add(refuelPlaneBtn);
  }

  @Override
  public void update(Observable o, Object arg) {
    displayFlightDetails();
    selectValue();
  }

  public void displayFlightDetails() {
    for (int i = 0; i < aircraftManagementDatabase.maxMRs; i++) {
      if (aircraftManagementDatabase.getStatus(i) == ManagementRecord.READY_REFUEL) {
        if (!planesIncoming.contains(aircraftManagementDatabase.getFlightCode(i))) {
          planesIncoming.addElement(aircraftManagementDatabase.getFlightCode(i));
        }
      }

      if (aircraftManagementDatabase.getStatus(i) == ManagementRecord.READY_PASSENGERS)
        planesIncoming.removeElement(aircraftManagementDatabase.getFlightCode(i));
    }
  }

  public void selectValue() {
    planesTA.addListSelectionListener(e -> mrIndex = aircraftManagementDatabase.findMrIndex((String) planesTA.getSelectedValue()));
  }

  @Override
  public void actionPerformed(ActionEvent e) {
    if (e.getSource() == refuelPlaneBtn) {
      if (aircraftManagementDatabase.getStatus(mrIndex) == ManagementRecord.READY_REFUEL) {
        aircraftManagementDatabase.setStatus(mrIndex, ManagementRecord.READY_PASSENGERS);
      }
    }
  }
}
