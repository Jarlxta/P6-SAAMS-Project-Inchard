package dev;// Generated by Together


/**
 * Contains all details of a flight: the flight code, itinerary and passenger list.
 * This is the package of information downloaded from an aircraft by the dev.RadarTransceiver as the aircraft enters Stirling Airport's airspace.
 * Not obvious from the class diagram is that the dev.RadarTransceiver boundary class should construct a dev.FlightDescriptor when it "detects" an aircraft, and passes that object to the dev.AircraftManagementDatabase as the parameter of a radarDetect message. (Since this will probably/possibly be local to an event handler method in dev.RadarTransceiver, there is no attribute association from dev.RadarTransceiver to dev.FlightDescriptor.)
 * @stereotype entity
 * @url element://model:project::SAAMS/design:node:::id3oolzcko4qme4cko4sx40.node173
 * @url element://model:project::SAAMS/design:view:::id3oolzcko4qme4cko4sx40
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class FlightDescriptor {
  /**
   * Constructor: A new dev.FlightDescriptor must be given a flightCode (String), an dev.Itinerary,
   * and the current dev.PassengerList.
   */
  public FlightDescriptor(String flightCode, Itinerary itinerary, PassengerList list){
    this.flightCode = flightCode;
    this.flightItinerary = itinerary;
    this.passengers = list;
  }

  /**
   * Each Flight Descriptor contains a list of passengers on the flight.
   * @link aggregation
   * @clientCardinality 1
   * @supplierCardinality 1
   * @label contains
   * @directed*/
  private PassengerList passengers;

  /**
   * Each Flight Descriptor contains a flight dev.Itinerary..
   * @link aggregation
   * @clientCardinality 1
   * @supplierCardinality 1
   * @label contains
   * @directed*/
  private Itinerary flightItinerary;

/**
 * A short string identifying the flight:
 *
 * Usually airline abbreviation plus number, e.g. BA127.
 * Obtained from flight descriptor when aircraft is first detected.
 *
 * This is the code used in timetables, and is useful to show on public information screens.*/
  private String flightCode;

  /**
   * Get the flight code.
   * @return The flight code.
  */
  public String getFlightCode() {
    return flightCode;
  }

  /**
   * Get the flight itinerary.
   * @return The flight itinerary
   */
  public Itinerary getItinerary() {
    return flightItinerary;
  }

  /**
   * Get the passenger list.
   * @return The passenger list.
   */
  public PassengerList getPassengerList() {
    return passengers;
  }

}
